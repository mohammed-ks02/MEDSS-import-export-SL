---
import '../styles/global.css';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import LanguageWrapper from '../components/LanguageWrapper';
import { SEO } from 'astro-seo';
import type { Props as SEOProps } from 'astro-seo';
import { DEFAULT_LANGUAGE } from '../utils/serverLanguage';

// Define the props that each page can pass to the layout
export interface Props {
  title: string;
  description: string;
  seo?: SEOProps;
}

const { title, description, seo } = Astro.props;

// In static mode, we use the default language and let client-side handle detection
const detectedLanguage = DEFAULT_LANGUAGE;
---

<!DOCTYPE html>
<html lang={detectedLanguage}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    
    <!-- SEO Component -->
    <SEO
      title={title}
      description={description}
      canonical={Astro.url.href}
      openGraph={{
        basic: {
          title: title,
          type: 'website',
          image: new URL('/logo.webp', Astro.url).href,
        },
      }}
      twitter={{
        creator: '@medssimport',
        site: '@medssimport',
        card: 'summary_large_image',
      }}
      {...seo}
    />
    
    <!-- Preload critical fonts -->
    <link rel="preload" href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" as="style" />
    
    <!-- Schema.org structured data for Organization -->
    <script type="application/ld+json" is:inline>
      {
        "@context": "https://schema.org",
        "@type": "Organization",
        "name": "MED SS IMPORT & EXPORT",
        "url": "https://www.medssimport.com",
        "logo": "https://www.medssimport.com/logo.webp",
        "description": "Professional import-export and logistics for Spanish fresh produce worldwide",
        "contactPoint": {
          "@type": "ContactPoint",
          "telephone": "+34 954 000 000",
          "contactType": "sales",
          "email": "info.medssimport@gmail.com"
        },
        "address": {
          "@type": "PostalAddress",
          "streetAddress": "Calle Puerto 17 B",
          "postalCode": "41020",
          "addressLocality": "Sevilla",
          "addressCountry": "Spain"
        },
        "additionalProperty": {
          "@type": "PropertyValue",
          "name": "Warehouse",
          "value": "Longitudinal 5 Nº 83, Mercabarna, 08040 Barcelona, Spain"
        }
      }
    </script>
    
    <!-- Preload language to prevent content flicker -->
    <script is:inline define:vars={{ detectedLanguage }}>
      // Set language in localStorage before React components hydrate
      if (typeof Storage !== 'undefined') {
        const currentLang = localStorage.getItem('language');
        if (!currentLang) {
          localStorage.setItem('language', detectedLanguage);
        }
      }
      
      // Set language cookie for persistence
      document.cookie = `language=${detectedLanguage}; path=/; max-age=${60 * 60 * 24 * 30}; SameSite=Strict`;
    </script>
  </head>
  <body class="text-neutral-800 antialiased">
    <Header />
    <main>
      <LanguageWrapper client:load initialLanguage={detectedLanguage}>
        <slot />
      </LanguageWrapper>
    </main>
    <Footer />
      <script>
// Enhanced Global Translation System
(function() {
  'use strict';
  
  let currentLanguage = 'es'; // Default to Spanish
  let translations = {};
  
  // Load translations from JSON files
  async function loadTranslations() {
    try {
      const [enRes, esRes, frRes] = await Promise.all([
        fetch('/src/locales/en/common.json').catch(() => null),
        fetch('/src/locales/es/common.json').catch(() => null),
        fetch('/src/locales/fr/common.json').catch(() => null)
      ]);
      
      if (enRes) translations.en = await enRes.json();
      if (esRes) translations.es = await esRes.json();
      if (frRes) translations.fr = await frRes.json();
    } catch (error) {
      console.warn('Could not load translations:', error);
      // Fallback translations
      translations = {
        en: {
          nav_home: "Home",
          nav_products: "Products", 
          nav_about: "About Us",
          nav_contact: "Contact"
        },
        es: {
          nav_home: "Inicio",
          nav_products: "Productos",
          nav_about: "Sobre Nosotros", 
          nav_contact: "Contacto"
        },
        fr: {
          nav_home: "Accueil",
          nav_products: "Produits",
          nav_about: "À propos",
          nav_contact: "Contact"
        }
      };
    }
  }
  
  // Apply translations to elements
  function applyTranslations() {
    document.querySelectorAll('[data-i18n]').forEach(element => {
      const key = element.getAttribute('data-i18n');
      let translatedText = getNestedTranslation(translations[currentLanguage], key);
      
      if (translatedText) {
        element.textContent = translatedText;
      }
    });
  }
  
  // Helper function to get nested translation keys
  function getNestedTranslation(obj, key) {
    if (!obj) return null;
    
    // Handle nested keys like 'why_choose.title'
    if (key.includes('.')) {
      const keys = key.split('.');
      let current = obj;
      
      for (const k of keys) {
        if (current && typeof current === 'object' && k in current) {
          current = current[k];
        } else {
          return null;
        }
      }
      
      return current;
    }
    
    // Handle simple keys
    return obj[key] || null;
  }
  
  // Update language display
  function updateLanguageDisplay() {
    const langSpans = document.querySelectorAll('#current-lang, #current-lang-mobile');
    langSpans.forEach(span => {
      if (span) span.textContent = currentLanguage.toUpperCase();
    });
    
    // Hide current language in dropdown
    document.querySelectorAll('.lang-option, .lang-option-mobile').forEach(option => {
      const optionLang = option.getAttribute('data-lang');
      if (optionLang === currentLanguage) {
        option.style.display = 'none';
      } else {
        option.style.display = 'block';
      }
    });
  }
  
  // Change language
  function changeLanguage(newLang) {
    if (translations[newLang]) {
      currentLanguage = newLang;
      localStorage.setItem('lang', newLang);
      localStorage.setItem('language', newLang);
      applyTranslations();
      updateLanguageDisplay();
      
      // Trigger custom event for React components
      window.dispatchEvent(new CustomEvent('languageChange', { 
        detail: { language: newLang } 
      }));
    }
  }
  
  // Initialize
  function init() {
    // Get saved language or default to Spanish
    const savedLang = localStorage.getItem('lang') || localStorage.getItem('language') || 'es';
    currentLanguage = savedLang;
    
    loadTranslations().then(() => {
      applyTranslations();
      updateLanguageDisplay();
    });
    
    // Set up language switchers
    document.addEventListener('click', (e) => {
      if (e.target.classList.contains('lang-option') || e.target.classList.contains('lang-option-mobile')) {
        const newLang = e.target.getAttribute('data-lang');
        changeLanguage(newLang);
        
        // Close dropdown
        const dropdowns = document.querySelectorAll('#lang-dropdown, #lang-dropdown-mobile');
        dropdowns.forEach(dropdown => dropdown.classList.add('hidden'));
      }
    });
  }
  
  // Start when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }
  
  // Expose globally
  window.changeLanguage = changeLanguage;
})();
</script>
  </body>
</html>
